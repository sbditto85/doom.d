#+title: Config
#+property: header_args :tangle config.el

* Table of Contents :toc:
- [[#doom-default-stuff][Doom Default Stuff]]
- [[#magit-split][Magit split]]
- [[#whitespace-mode][Whitespace mode]]
- [[#time][Time]]
- [[#comments][Comments]]
- [[#tree-view][Tree view]]
- [[#multiple-cursors][Multiple Cursors]]
  - [[#highlight-select][Highlight select]]
  - [[#cursor-on-next-line][Cursor on next line]]
- [[#movement][Movement]]
- [[#window-numbering][Window numbering]]
- [[#projectile][Projectile]]
  - [[#path][Path]]
  - [[#search-all-projects][Search all projects]]
- [[#dired][Dired]]
- [[#sharing-or-solo-mode][Sharing or Solo mode]]

* Doom Default Stuff
$DOOMDIR/config.el -*- lexical-binding: t; -*-

Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!


Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.
#+begin_src elisp :tangle yes
(setq user-full-name "Casey Allred"
      user-mail-address "sbditto85@gmail.com")
#+end_src

Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:

setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
     doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:
#+begin_src elisp :tangle yes
(setq doom-theme 'modus-vivendi)
#+end_src

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src elisp :tangle yes
(setq display-line-numbers-type 'relative)
#+end_src

If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+begin_src elisp :tangle yes
(setq org-directory "~/org/")
#+end_src

Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

* Magit split

#+begin_src elisp :tangle yes
(setq split-width-threshold 0)
(setq split-height-threshold 0)
;; (set-popup-rule! "magit" :slot -1 :vslot 1 :side 'right :size 0.5 :select t)
#+end_src

* Whitespace mode

#+begin_src elisp :tangle yes
(global-whitespace-mode +1)
(setq whitespace-style '(face indentation trailing))
#+end_src

* Time
#+begin_src elisp :tangle yes
(defun sbditto85/append-date-time ()
  (interactive)
  (evil-append 0)
  (insert (format-time-string "%a %b %d %Y")))

(map! :leader :desc "Insert current time" :n "d" #'sbditto85/append-date-time)

(defun sbditto85/insert-date-time ()
  (interactive)
  (evil-append 0)
  (insert (format-time-string "%a %b %d %Y")))
#+end_src

* Comments
#+begin_src elisp :tangle yes
(defun sbditto85/author ()
  (let ((env-author (getenv "AUTHOR")))
    (if env-author
        env-author
        "sbditto85")
    )
  )
(defun sbditto85/comment-attribution ()
  (interactive)
  (evil-append 0)
  (insert " - " (sbditto85/author) ", ")
  (sbditto85/insert-date-time)
  )

(map! :leader :desc "Attribute comment" :n "c a" #'sbditto85/comment-attribution)
#+end_src

* Tree view
#+begin_src elisp :tangle yes
;; SPC o p to toggle treemacs open and closed
(map! :leader :desc "Toogle select treemacs" :n "w SPC" #'treemacs-select-window)
#+end_src
* Multiple Cursors

** Highlight select
I want to be able to quickly highlight only a select few matches and "g z d" is just too time consuming
#+begin_src elisp :tangle yes
(map! :desc "Multiple Cursors Next Highlight" :n "M-I" #'evil-mc-make-and-goto-next-match)
(map! :desc "Multiple Cursors Next Highlight" :i "M-I" #'evil-mc-make-and-goto-next-match)
#+end_src

** Cursor on next line
I want to be able to quickly add cursors below my current one if the changes lines up perfectly
#+begin_src elisp :tangle yes
(map! :desc "Multiple Cursors Next Highlight" :n "M-i" #'evil-mc-make-cursor-move-next-line)
(map! :desc "Multiple Cursors Next Highlight" :i "M-i" #'evil-mc-make-cursor-move-next-line)
#+end_src
* Movement

#+begin_src elisp :tangle yes
(defun sbditto85/evil-next-5-lines ()
  (interactive)
  (evil-next-line 5)
  )

(defun sbditto85/evil-previous-5-lines ()
  (interactive)
  (evil-previous-line 5)
  )

(map! :desc "Five lines down" :n "M-j" #'sbditto85/evil-next-5-lines)
(map! :desc "Five lines down" :i "M-j" #'sbditto85/evil-next-5-lines)
(map! :desc "Five lines up" :n "M-k" #'sbditto85/evil-previous-5-lines)
(map! :desc "Five lines up" :i "M-k" #'sbditto85/evil-previous-5-lines)

(add-hook 'markdown-mode-hook
          (lambda ()
            (local-set-key (kbd "M-j") nil)
            (local-set-key (kbd "M-k") nil)))

(add-hook 'treemacs-mode-hook
          (lambda ()
            (local-set-key (kbd "M-j") #'sbditto85/evil-next-5-lines)
            (local-set-key (kbd "M-k") #'sbditto85/evil-previous-5-lines)))

(map! :desc "Down (insert mode)" :i "C-j" #'evil-next-line)
(map! :desc "Up (insert mode)" :i "C-k" #'evil-previous-line)
#+end_src

* Window numbering
#+begin_src elisp :tangle yes
(window-numbering-mode 1)
#+end_src

* Searching

Search with swiper in buffer
#+begin_src elisp :tangle yes
(map! :desc "Search with Swiper" :n "C-s" #'+default/search-buffer)
(map! :desc "Search with Swiper" :i "C-s" #'+default/search-buffer)
#+end_src

* Projectile
** Path

#+begin_src elisp :tangle yes
(defun sbditto85/projects-path ()
  (getenv "PROJECTS_PATH")
  )

(defun sbditto85/set-projectile-project-path ()
  (interactive)
  (let ((projects-path (sbditto85/projects-path))
        )
    (when projects-path
      (setq projectile-project-search-path (split-string projects-path))
      )
    )
  )

(sbditto85/set-projectile-project-path)
#+end_src

** Search all projects

#+begin_src elisp :tangle yes
(defun sbditto85/search-projects ()
  (interactive)
  (let ((default-directory (nth 0 (split-string (sbditto85/projects-path))))
        )
    (call-interactively
     (cond ((modulep! :completion ivy)     #'+ivy/project-search-from-cwd)
           ((modulep! :completion helm)    #'+helm/project-search-from-cwd)
           ((modulep! :completion vertico) #'+vertico/project-search-from-cwd)
           (#'rgrep))))
  )

(map! :leader :desc "Search Projects" :n "s P" #'sbditto85/search-projects)
#+end_src

* Dired

#+begin_src elisp :tangle yes
 (evil-define-key 'normal dired-mode-map
   (kbd "h") 'dired-up-directory
   (kbd "l") 'dired-find-file
   )
#+end_src

* Sharing or Solo mode

 When sharing with others the font size should be larger so its easier for them to read. When I'm solo I don't mind having the font be a bit smaller
#+begin_src elisp :tangle yes
(defun sbditto85/set-sharing ()
  (interactive)
  (set-face-attribute 'default nil :height 185)
  (setq magit-status-headers-hook
        '(magit-insert-error-header magit-insert-diff-filter-header magit-insert-head-branch-header))
  )

(defun sbditto85/set-solo ()
  (interactive)
  (set-face-attribute 'default nil :height 150)
  (setq magit-status-headers-hook
        '(magit-insert-error-header magit-insert-diff-filter-header magit-insert-head-branch-header magit-insert-upstream-branch-header magit-insert-push-branch-header magit-insert-tags-header))
  )

(sbditto85/set-solo)
#+end_src
